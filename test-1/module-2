
UNSIGNED NUMBERS

Computers can only process binary numbers. Hex and octal is for human communication of these complex binary numbers.


Decimal - Our regular number system, Radix = 10
01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11


Binary - Computer number system, Radix = 2
0,  1,  2,  3,  4,   5,   6,   7,   8
00, 01, 10, 11, 100, 101, 110, 111, 1000


Octal - Goes from 0-7, so 10 represents 8, Radix = 8
0, 1, 2, 3, 4, 5, 6, 7, 10, 10 = 1 * 8
11, 12, 13, 14, 15, 16, 17, 17 = 1 * 8 + 7
20, 21, 22, 23, 24, 25, 26, 27

Now the 2 in the octal system represents 16 or 2*8


Hexidecimal - Goes from 0-15. So far, the most confusing of the bunch, Radix = 16
1, 2, 3, 4, 5, 6, 7, 8, 9, A = 10, B = 11, C = 12, D = 13, E = 14, F = 15

10 = 1 * 16
11 = 1 * 16 + 1 

1C
1D
1E = 1 * 16 + 14
1F = 1 * 16 + 15

20 = 2 * 16 + 0

* Bring a calculator for exams

For examples of hex and octal to binary conversion, check slide 9 & 11


Binary to Octal 

When converting binary to octal and hex, each group of 3 0 and 1's is considered one digit

Start grouping from decimal to the left and decimal to the right

If for the ending group there aren'y exactly 3 digits, just add 0 at the beginning and it represents the same value


Binary to Hex

Groups are 4 digits of binary

The same applies if there aren't enough digits for a group, just add zeros before the values until it makes a group of 4 and it will represent the same value

** Double check the slides to confirm this


Repeated division to convert integers to binary and repeated multipulcation to convert fractions to binary

1111 = 2^n - 1
10000 = 2^n

# of combinations a binary number can be: 2^n

method in c sizeof() will return the amount of bits a variable takes up

* Need to know data range for an unsigned numbers and 2's complement
Data range for unsigned number: [0, 2^n - 1]




SIGNED NUMBERS

Divide representation in two halves. First half represents positive values and the second half represents the negative values. 

For values that can be represented with 4 bits:
Unsigned [0, 15]
Signed [-7, 7] 
Overlap [0, 7]

For signed numbers, if the most significant digit is 0, it's positive, if it's 1, then it's negative

Since signed numbers use the leftmost value as the sign, the max value for 4 bits is 2^3-1 while for unsigned its 2^4-1

1 000 = 0
1 001 = -1 
1 010 = -2
1 011 = -3
1 100 = -4


1's Complement
1's Complement also uses the most signigicant digit to represent the sign of the integer

If you perform addition for two values, you always get 1111, example:
-2 is 1101 and 2 is 0010 SO -2 + 2 = 1111 and this pattern continues for all integers

Whatever the postiive decimal is represented as a signed number in binary, the negative value is represented with all of the inverse numbers. Example

-4 = 1011, 4 = 0100  

And this pattern continues for every number 

-45 = 11010010

The problem with 1's complement is that there's a -0: 1111 and 0: 0000, if you're adding and cross this bar, you must perform an additional addition to get the right answer


Sign Magnitude 
For SM, the min and max and equal parts negative and positive, so for 4 bits: min is -7 and max is 7
45 = 0010 1101, therefore in sign magnitude we just change the signed bit to one to make it negative and keep the rest so
-45 = 1010 1101

So to sum it up, for sign magnitude if we want to change the number to negative then we just change the most significant digit to the inverse. 
For 1's complement, we change all of the values in the binary number to their inverse.

The range for signed numbers is half of the range of unsigned numbers because you lose the most significant digit to make the distinction if the number is positive or negative

Max for Signed number: 2^n-1

Min number for 1's complement: -(2(n-1)-1)
Min for 2's complement: -2^(n-1)
Max number for 1's and 2's complement: 2(n-1)-1

Example: Converting a binary to Sign Magnitude and 1's Complement
Original 1100 0110

SM
1100 0110
- 70

1's Complement - Negative because everything is changed 
0011 1001
-57


2's Complement
It's going to be the 1's complement + 1

So 1's complement of 45 = 1101 0010 
2's complement is 46 = 1101 0011

So 1's complement of -57 = 1101 0010 
2's complement is -58 = 0011 1010

To flip a number in 2's complement, do inverse and add one, example: 
3: 0011
-3: 1100 + 1 => 1101

So since you're adding one for 2's complement, the total value of the number goes up by one

2's complement is the best number representation because you don't need to perform an extra addition like in 1's complement

2's complement representation isn't symmetrical, it starts at -8 on the chart and goes to 7, check circular chart

* For extra clarity on these number representations, check the circular charts from the power points

****************** Come back and condense these notes from line 58 - 136, maybe place these notes in their own file under a module 2 folder




PRACTICE

53 and -53
SM = 0011 0101 and 1011 0100 - To go negative, flip the sign bit only
1's Compliment = 0011 0101 and 1100 1010 - To go negative, flip all of the bits
2's Compliment 0011 0101 and 1100 1011 - For negative, add one to negative 1's Compliment

* Another way to do 2's Compliment is to keep the least significant digit and to flip the rest from right to left, experiment with this

PRACTICE

1011 1100
SM = -60 
1's Compliment = -67
2's Compliment = -68
0100 0100 = 64 + 4 = 68 - 2's Compliment

It's easier to find the postive representation and just change it to negative rather than trying to find the negative representation right away

***************** Go back over all practices and found out how she got these

** Look into binary subtraction, I don't completely understand the borrowing system

Practice Hexidecimal addition and subtraction, mainly subtraction


Addition and subtraction of SM

If signed bits are the same, perform addition. If they're different, perform subtraction. The larger integer always goes on top no matter what the sign is so it would be -4 +3 

Addition and subtraction of 1's Compliment
-4 + (-3): when you get to left most bit in addition, it's 10111 so you carry the one over and eventually get 1000

When subtracting in 1's complement, you still perform binary addition and eventually carry

Addition and subtraction of 2's Compliment
When adding 2 negative numbers, if you get an extra then don't carry it, example:
-4 + (-3) = 1100 + 1101 = 1001 but then you flip it because the final answer is negative and add one for 2's compliment so the answer is 0111

* I'm going to have to watch some youtube videos on this.


** I need to organize all of this where SM, 1's Complement, and 2's Complement each have their own file in the module 2 folder