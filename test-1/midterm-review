
** If carry in is different from carry out, then there's overflow
Carry in is the integer carried to the left most bit and carry out is the integer carried out to the left of that where it's over the outside of the binary representation

----- EXAMPLE MIDTERM  QUESTIONS -----

Complete the following two operations using twos complement arithmetic with 8 bits. Verify if the results are correct, if not then give a brief explanation. 

a) 39_10 + 89_10
1st step: represent these two integers in 2's complement
2nd step: perform binary addition and check for overflow

39: 0010 0111
89: 0101 1001

39 + 89: 1000 0000, since we carried into the sign bit but didn't carry out, there is overflow
The result is negative because the signed bit is 1, but that's impossible because we added two positive integers

1000 0000 represents -128 in 2's complement, since 1 is the least significant digit, it counts as 128 even though it's the signed bit


b) 39 + 52
Same steps as example a

39: 0010 0111
52: 0011 0100

39 + 52: 0101 1011, no overflow occurs because the resulting binary representation is positive 

Step 3: explain output
Result is 9 b/c 80 + 11. 


c) -39_10 - 89_10
Represent these two integers in 2's complement: so convert to binary, flip the bits, and add 1

-39: 1101 1001
-89: 1010 0111

Then do binary addition

-39 + -89: 1000 0000 -> No overflow because carry into sign and carry out from sign is both 1

Now convert to decimial -> -128 which is the correct result of adding both these negative numbers


d) -52 - 94
Represent in 2's complement -> So convert to binary, flip the bits, and add 1 OR take the least significant digit and flip that digit and everything to the left of it. Results are the same

-52: 1100 1100
-94: 1010 0010

Perform binary addition: 0110 1110 -> carry in is 0 and carry out is 1, so overflow detected

We can tell because the resulting integer is positive, yet we added two negative integers



----- IN CLASS MIDTERM REVIEW -----

Problem 2: 

1. 

Processor, memory, I/O. Processor has 3 parts: Registers, ALU, & Control Unit


2. 

Left Shift: Insert 0 to least significant digit

Right Shift: 

Logic -> Insert 0 to most significant digit and least significant digit shifts out
Arithmitic -> Insert the signed bit to most significant digit, least significant digit shifts out. EXAMPLE
1001 1100 -> shift right by one position -> 1100 1110


3. Sign Extension: Copy signed bits to the front


4. Data Range where n is the number of bits

Unsigned numbers: [0, 2^n-1]

SM: [-(2^(n-1)-1), 2^(n-1)-1] 
Range with 4 bits: [-7, 7], 7 = 2(4-1)-1 = 2^3 - 1 = 7

1's: [-(2^(n-1)-1), 2^(n-1)-1] 
Data range for SM and 1's is the same 

2's: [-2^(n-1), 2^n-1] 
Range with 4 bits: [-8, 7]


5. Data Representations 

Changing from pos to neg and vice versa 
SM: Flip the MSD

1's: Flip all of the bits 

2's: Flip all of the bits and add one OR keep least significant one and slip all bits to the left


Problem 3: 

There are 2 0 representations in SM: True, 0 and -0 

How many 0 representations in 1's: 2

How many 0 representations in 2's: 1


Problem 4: 

** Bring calculator

1. 2^7, + 2^4 + 2^3 + 1 + 2^-1 + 2^-3

2. Covert signed 2's complement octal number to decimial
512 in Octal is positive because when converting to 2's complement, signed bit is 0
512 -> 101 001 010 -> 010 110 110
So octal to binary then binary to 2's then 2's to decimal

3. Covert signed 2's complement octal number to decimial
9AC9 in Hex is negative because MSD is 1 in 2's complement

6. If grouping to the left of decimal is missing digits, add 0's to beginning, if missing digits after decimal, add 0's to end

8. 2 * 2^30 -> 2 * 2^31

9. 
Period for one clock cycle: 1/F -> 1/(1.9 * 10^9) -> 1/1.9 * 10^-9
Multiplying by 10^-9 is to convert seconds to nanoseconds

10. 
  1
    1 0 0 1 1 0 0 1
+   1 1 0 0 0 1 0 0 

    0 1 0 1 1 1 0 1 

Carry in a zero and carry out a 1 -> carry in and carry out are different so overflow occurs

11. Have to convert pos value to negative value in 2's complement since theres no subtraction

    1 0 0 0 1 0 0 0 
+   1 0 0 1 0 1 1 0 

Since carry in and carry out is the same for the signed bit here, there is no overflow

Problem 5

1. 

For 2's complement: If there is a final carry out -> discard it
For 1's complement: If there's a final carry out -> End round carry

    (38)10      (-38)10     (86)10      (-86)10
SM  0010 0110   1010 0110   0101 0110   1101 0110
1's 0010 0110   1101 1001   0101 0110   1010 1001
2's 0010 0110   1101 1010   0101 0110


1's Addition: 1101 1001 + 1010 1001 -> 1 1000 0010 -> End round carry -> add plus one -> 1000 0011 -> Final answer after bit flipping: 124

Since the carry in and carry out of the signed bit are both one, they are the same and there is no over flow 

** Overflow can only occue when you perform 2 positive or 2 negative additon. 


Character codes: 1 point on midterm

Binary Code Decimal (BCD): For each character we use four bits to represent that character because 4 bits goes 0-9 

(13)10 -> (1101)2 This is conversion, int a = 13
(13)10 -> (0001 0011)BCD this is coding, string s = "13"

!Important
** BCD code, 10 character, 4 bits per character 

ASCII: 7 bits, can represent 2^7 so 128 characters, char c = 'a'

Unicode: 16 bits, represent 2^16 characters